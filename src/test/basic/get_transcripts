#!/usr/bin/env perl
use strict;
use warnings;

use Carp;

use Bio::EnsEMBL::Registry;
use Bio::SeqIO;
use Bio::Seq;

use File::Path;

# Load EnsEMBL registry:
my $reg = 'Bio::EnsEMBL::Registry';
$reg->load_registry_from_db(
    -host => 'ensembldb.ensembl.org',
    -user => 'anonymous'
);


# Get a human gene adaptor via core API:
my $gene_adaptor = $reg->get_adaptor( 'human', 'core', 'gene' );

# Open counts file.
open my $count_fh,'<',"counts.tab";

my $out = Bio::SeqIO->new(-file => ">test_transcripts.fas" ,
                                  -format => 'fasta');

while(my $line = <$count_fh>){

    my($id,$count) = ($line =~ /^(\S+)\s(\S+)$/);
    $id =~ s/"//g;

    # Discard transcripts with low counts.
    next if $count < 10;	

    # Discard merged IDs:
    next if $id =~ /\+/;

    my $gene = fetch_gene($id);

    # Discard retired IDs:
    next if !defined $gene;

    # Fetch canonical transcript:
    my $ctr  = fetch_ctr($gene);
    my $seq = $ctr->seq();
   
    # Save transcript & count: 
    $seq->display_id( $seq->display_id() ."|". $count );
    $out->write_seq($seq);
}

sub fetch_ctr {
    my $gene = shift || die "No gene object given!";
    my $ctr = $gene->canonical_transcript;
    return $ctr;
}

sub fetch_gene{
    my $id = shift;

    if(length $id == 0) {
        die "No gene id given!";
    }

    my $gene = $gene_adaptor->fetch_by_stable_id($id); 
    return $gene;
}

